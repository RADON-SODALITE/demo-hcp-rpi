---
tosca_definitions_version: tosca_simple_yaml_1_3

node_types:
  radon.nodes.bucket_create:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      bucket_in:
        type: string
        description: The name of the incoming bucket
      bucket_out:
        type: string
        description: The name of the output bucket
      hostname:
        type: string
        description: IP address of the MiniIO object storage
      minio_user:
        type: string
        description: MiniIO username
      minio_pass:
        type: string
        description: MiniIO password
    attributes:
      bucket_in:
        type: string
      bucket_out:
        type: string
      hostname:
        type: string
      minio_user:
        type: string
      minio_pass:
        type: string
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        inputs:
          bucket_in: {default: { get_property: [SELF, bucket_in] }, type: string }
          bucket_out: {default: { get_property: [SELF, bucket_out] }, type: string }
          hostname: {default: { get_property: [SELF, hostname] }, type: string }
          minio_user: {default: { get_property: [SELF, minio_user] }, type: string }
          minio_pass: {default: { get_property: [SELF, minio_pass] }, type: string }
        operations:
          create:
            implementation: playbooks/bucket-create/create.yml
          delete:
            implementation: playbooks/bucket-create/remove.yml

  radon.nodes.bucket_notification:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      hostname:
        type: string
        description: IP of the VM running the OpenFaaS
      function_name:
        type: string
        description: The name of the deployed OpenFaaS function
      minio_user:
        type: string
        description: MiniIO username
      minio_pass:
        type: string
        description: MiniIO password
      bucket_name:
        type: string
        description: The name of incoming the bucket
    attributes:
      hostname:
        type: string
      function_name:
        type: string
      minio_user:
        type: string
      minio_pass:
        type: string
      bucket_name:
        type: string
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        inputs:
          hostname: {default: { get_property: [SELF, node_ip] }, type: string }
          function_name: {default: { get_property: [SELF, function_name] }, type: string }
          minio_user: {default: { get_property: [SELF, minio_user] }, type: string }
          minio_pass: {default: { get_property: [SELF, minio_password] }, type: string }          
          bucket_name: {default: { get_property: [SELF, bucket_name] }, type: string }
        operations:
          create:
            implementation:
              primary: playbooks/bucket-notification/create.yml
              dependencies:
                - playbooks/bucket-notification/files/bucket-notification.py
          delete:
            implementation: playbooks/bucket-notification/remove.yml

  radon.nodes.function_deploy:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      image_name:
        type: string
        description: Name of already existing image with image-resize functionality.
      function_name:
        type: string
        description: Name of the new OpenFaaS image-resize function.
      hostname:
        type: string
        description: IP of the VM running the OpenFaaS
      minio_user:
        type: string
        description: MinIO username
      minio_pass:
        type: string
        description: MinIO password
      bucket_in:
        type: string
        description: The name of the incoming bucket
      bucket_out:
        type: string
        description: The name of the output bucket
    attributes:
      image_name:
        type: string
      function_name:
        type: string
      hostname:
        type: string
      minio_user:
        type: string
      minio_pass:
        type: string
      bucket_in:
        type: string
      bucket_out:
        type: string
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        inputs:
          image_name: {default: { get_property: [SELF, image_name] }, type: string }
          function_name: {default: { get_property: [SELF, function_name] }, type: string }
          hostname: {default: { get_property: [SELF, hostname] }, type: string }
          minio_user: {default: { get_property: [SELF, minio_user] }, type: string }
          minio_pass: {default: { get_property: [SELF, minio_pass] }, type: string }
          bucket_in: {default: { get_property: [SELF, bucket_in] }, type: string }
          bucket_out: {default: { get_property: [SELF, bucket_out] }, type: string }
        operations:
          create:
            implementation: playbooks/function-deploy/create.yml
          delete:
            implementation: playbooks/function-deploy/remove.yml


topology_template:
  inputs:
    hostname:
      type: string
    minio_user:
      type: string
    minio_pass:
      type: string
    bucket_in:
      type: string
    bucket_out:
      type: string
    image_name:
      type: string
    function_name:
      type: string

  node_templates:
    my-workstation:
      type: tosca.nodes.Compute
      attributes:
        private_address: { get_input: hostname }
        public_address: { get_input: hostname }

    bucket_create:
      type: radon.nodes.bucket_create
      properties:
        bucket_in: { get_input: bucket_in }
        bucket_out: { get_input: bucket_out }
        hostname: { get_input: hostname }
        minio_user: { get_input: minio_user }
        minio_password: { get_input: minio_password }
      requirements:
        - host: my-workstation

    function_deploy:
      type: radon.nodes.function_deploy
      properties:
        image_name: { get_input: image_name }
        function_name: { get_input: function_name }
        hostname: { get_input: hostname }
        minio_user: { get_input: minio_user }
        minio_pass: { get_input: minio_pass }
        bucket_in: { get_input: bucket_in }
        bucket_out: { get_input: bucket_out }
      requirements:
        - host: my-workstation

    bucket_notification:
      type: radon.nodes.bucket_notification
      properties:
        hostname: { get_input: hostname }
        minio_user: { get_input: minio_user }
        minio_pass: { get_input: minio_pass }
        function_name: { get_input: resize_function_name }
        bucket_name: { get_input: bucket_in }
      requirements:
        - host: my-workstation
...